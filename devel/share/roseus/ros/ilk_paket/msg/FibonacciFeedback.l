;; Auto-generated. Do not edit!


(when (boundp 'ilk_paket::FibonacciFeedback)
  (if (not (find-package "ILK_PAKET"))
    (make-package "ILK_PAKET"))
  (shadow 'FibonacciFeedback (find-package "ILK_PAKET")))
(unless (find-package "ILK_PAKET::FIBONACCIFEEDBACK")
  (make-package "ILK_PAKET::FIBONACCIFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude FibonacciFeedback.msg.html


(defclass ilk_paket::FibonacciFeedback
  :super ros::object
  :slots (_result ))

(defmethod ilk_paket::FibonacciFeedback
  (:init
   (&key
    ((:result __result) (make-array 0 :initial-element 0 :element-type :integer))
    )
   (send-super :init)
   (setq _result __result)
   self)
  (:result
   (&optional __result)
   (if __result (setq _result __result)) _result)
  (:serialization-length
   ()
   (+
    ;; int32[] _result
    (* 4    (length _result)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int32[] _result
     (write-long (length _result) s)
     (dotimes (i (length _result))
       (write-long (elt _result i) s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int32[] _result
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _result (instantiate integer-vector n))
     (dotimes (i n)
     (setf (elt _result i) (sys::peek buf ptr- :integer)) (incf ptr- 4)
     ))
   ;;
   self)
  )

(setf (get ilk_paket::FibonacciFeedback :md5sum-) "735d5bb657ca4356bf24ff5eb86bf466")
(setf (get ilk_paket::FibonacciFeedback :datatype-) "ilk_paket/FibonacciFeedback")
(setf (get ilk_paket::FibonacciFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
int32[] result

")



(provide :ilk_paket/FibonacciFeedback "735d5bb657ca4356bf24ff5eb86bf466")


